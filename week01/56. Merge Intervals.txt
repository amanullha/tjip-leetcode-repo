class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        sort(intervals.begin(),intervals.end());
        
        vector<vector<int> >ans;
        
        int i=0,j=0;
        bool f=1;
        for(auto x:intervals){
            
            if(f){
                i=x[0];
                j=x[1];
                f=0;
            }
            else{
                
                if(x[0]<=j){
                    
                    i=min(i,x[0]); 
                    j=max(j,x[1]);
                }
                else{
                    ans.push_back({i,j});
                    
                    i=x[0];
                    j=x[1];
                }
                
                
            }
            
       // cout<<"x0: "<<x[0]<<"  x1: "<<x[1]<<endl;
//             for(int i=0;i<ans.size();i++)
//             {
//                 cout<<ans[i][0]<<"  "<<ans[i][1]<<endl;
//             }
            
//             cout<<endl<<endl;
        }
        
        ans.push_back({i,j});
        return ans;
    }
    
   
};



// shorter

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        sort(intervals.begin(),intervals.end());
        
        int s=intervals[0][0];
        int e=intervals[0][1];
        vector<vector<int>>ans;
        for(int i=1;i<intervals.size();i++)
        {
            int ss=intervals[i][0];
            int ee=intervals[i][1];
            
            if(ss<=e){
                if(ee>e)
                e=ee;
            }
            else{
                
                ans.push_back({s,e});
                s=ss;
                e=ee;
            }
            
        }
        
      ans.push_back({s,e});
    return ans;
    }
};