// solution 1: 

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        //
      
        int n=nums.size();
        if(n<3)return {};
        sort(nums.begin(),nums.end());
        
        
        vector<vector<int>>ans;
        
        int i=0,j,k;
        
        while(i<n-2){
            
            
            while(i!=0 and nums[i]==nums[i-1] and i<n-2)i++;
            
            // take first one value
            int x=nums[i];
            
            
            
            // find two other value;
            
            j=i+1;
            k=n-1;
            

            while(i<j and j<k){
                
                while(j!=i+1 and nums[j]==nums[j-1] and j<k)j++;
                
                while(k!=n-1 and nums[k]==nums[k+1] and j<k)k--;
                
                int sum=x+nums[j]+nums[k];
                
                if(sum==0 and i<j and j<k){
                    
                    ans.push_back({x,nums[j],nums[k]});
                    j++,k--;
                }
                else if(sum>0)k--;
                else if( sum<0)j++;
                
                
            }
            

            i++;
        }
        
        return ans;
        
    }
};



// solution 2:


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        vector<vector<int>>triplets;
        sort(nums.begin(),nums.end());
        
        int i=0;
        int n=nums.size();

        
        while(i<n-2){
      
            int j=i+1;
            int k=n-1;
            
            while(j<k){
                
                int sum=nums[j]+nums[k]+nums[i];
                
                if(sum==0){
                    triplets.push_back({nums[i],nums[j],nums[k]});
                   
                    int t=nums[j];
                    
                    while(t==nums[j] and j<k)j++;
                    
                    t=nums[k];
                    while(t==nums[k] and k>j)k--;
                    
                }
                else if(sum>0)k--;
                else j++;
                
                
            }
            if(i+1<n and nums[i]==nums[i+1])
            {
                while(i+1<n and nums[i]==nums[i+1])i++;
            }
           
            i++;
           
        }
        
        return triplets;
    }
};